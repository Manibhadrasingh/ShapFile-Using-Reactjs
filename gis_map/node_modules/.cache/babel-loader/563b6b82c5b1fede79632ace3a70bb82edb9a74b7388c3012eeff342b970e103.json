{"ast":null,"code":"var _jsxFileName = \"/Users/manibhadrasingh/Documents/gis_map/gis_map/src/RenderMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport * as shapefile from \"shapefile\";\nimport proj4 from \"proj4\";\nimport { Loader } from \"@googlemaps/js-api-loader\";\n// import \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCenter = {\n  lat: 21.838,\n  lng: 73.7191\n};\nconst defaultZoom = 8;\nfunction RenderMap() {\n  _s();\n  const mapRef = useRef(null);\n  const googleMap = useRef(null);\n  const infoWindow = useRef(null);\n  const [geoData, setGeoData] = useState(null);\n  const [uploadedFiles, setUploadedFiles] = useState({\n    shp: null,\n    dbf: null,\n    shx: null,\n    prj: null,\n    cpg: null,\n    sbn: null,\n    sbx: null,\n    xml: null\n  });\n  const fileInputRefs = {\n    shp: useRef(),\n    dbf: useRef(),\n    shx: useRef(),\n    prj: useRef(),\n    cpg: useRef(),\n    sbn: useRef(),\n    sbx: useRef(),\n    xml: useRef()\n  };\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: \"AIzaSyCKc0R1tpxSs85HgWUJ0cgnScSuDSIjNMA\",\n      // Replace with your actual API key\n      version: \"weekly\"\n    });\n    loader.load().then(() => {\n      googleMap.current = new window.google.maps.Map(mapRef.current, {\n        center: defaultCenter,\n        zoom: defaultZoom\n      });\n      infoWindow.current = new window.google.maps.InfoWindow();\n    }).catch(error => {\n      console.error(\"Error loading Google Maps API:\", error);\n    });\n  }, []);\n  useEffect(() => {\n    if (geoData && googleMap.current) {\n      // Clear existing data layers\n      googleMap.current.data.forEach(feature => {\n        googleMap.current.data.remove(feature);\n      });\n\n      // Add new GeoJSON data\n      googleMap.current.data.addGeoJson(geoData);\n      googleMap.current.data.setStyle({\n        fillColor: \"#00FFFF\",\n        fillOpacity: 0.5,\n        strokeColor: \"#FF1493\",\n        strokeWeight: 2\n      });\n\n      // Fit the map to GeoJSON bounds\n      const bounds = new window.google.maps.LatLngBounds();\n      googleMap.current.data.forEach(feature => {\n        const geometry = feature.getGeometry();\n        if (geometry) {\n          geometry.forEachLatLng(latLng => bounds.extend(latLng));\n        }\n      });\n      if (!bounds.isEmpty()) {\n        googleMap.current.fitBounds(bounds);\n      } else {\n        console.warn(\"No valid GeoJSON bounds to adjust the map.\");\n      }\n\n      // Add click listener to display feature data\n      googleMap.current.data.addListener(\"click\", event => {\n        const feature = event.feature;\n        const properties = {};\n        feature.forEachProperty((value, key) => {\n          properties[key] = value;\n        });\n        const formattedProperties = `\n          <table style=\"border-collapse: collapse; width: 100%;\">\n            ${Object.entries(properties).map(([key, value]) => `\n                  <tr>\n                    <td style=\"border: 1px solid #ccc; padding: 4px;\"><strong>${key}</strong></td>\n                    <td style=\"border: 1px solid #ccc; padding: 4px;\">${value}</td>\n                  </tr>\n                `).join(\"\")}\n          </table>\n        `;\n        const geometry = feature.getGeometry();\n        if (geometry.getType() === \"Point\") {\n          const position = geometry.get();\n          infoWindow.current.setPosition(position);\n        } else {\n          const bounds = new window.google.maps.LatLngBounds();\n          geometry.forEachLatLng(latLng => bounds.extend(latLng));\n          infoWindow.current.setPosition(bounds.getCenter());\n        }\n        infoWindow.current.setContent(formattedProperties);\n        infoWindow.current.open(googleMap.current);\n      });\n    }\n  }, [geoData]);\n  const handleFileSelect = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const extension = file.name.split(\".\").pop().toLowerCase();\n    if ([\"shp\", \"dbf\", \"shx\", \"prj\", \"cpg\", \"sbn\", \"sbx\", \"xml\"].includes(extension)) {\n      setUploadedFiles(prevFiles => ({\n        ...prevFiles,\n        [extension]: file\n      }));\n      console.log(`${extension} file uploaded:`, file.name);\n    } else {\n      alert(\"Invalid file type. Please upload .shp, .dbf, .shx, .prj, .cpg, .sbn, .sbx, or .xml files.\");\n    }\n  };\n  const resetFiles = () => {\n    if (!window.confirm(\"Are you sure you want to clear all uploaded files?\")) {\n      return;\n    }\n    setUploadedFiles({\n      shp: null,\n      dbf: null,\n      shx: null,\n      prj: null,\n      cpg: null,\n      sbn: null,\n      sbx: null,\n      xml: null\n    });\n    setGeoData(null);\n    Object.values(fileInputRefs).forEach(ref => {\n      if (ref.current) ref.current.value = null;\n    });\n    if (googleMap.current) {\n      googleMap.current.data.forEach(feature => {\n        googleMap.current.data.remove(feature);\n      });\n      googleMap.current.setCenter(defaultCenter);\n      googleMap.current.setZoom(defaultZoom);\n    }\n    if (infoWindow.current) {\n      infoWindow.current.close();\n      infoWindow.current.setContent(null); // Clear the content\n    }\n  };\n  const processShapefile = async () => {\n    if (!uploadedFiles.shp || !uploadedFiles.dbf) {\n      alert(\"Please upload both .shp and .dbf files.\");\n      return;\n    }\n    try {\n      const shpBuffer = await readFileAsArrayBuffer(uploadedFiles.shp);\n      const dbfBuffer = await readFileAsArrayBuffer(uploadedFiles.dbf);\n      let geojson = await shapefile.read(shpBuffer, dbfBuffer);\n      if (uploadedFiles.prj) {\n        const prjText = await readFileAsText(uploadedFiles.prj);\n        const sourceProjection = proj4(prjText.trim());\n        const wgs84Projection = proj4(\"EPSG:4326\");\n        geojson.features = geojson.features.map(feature => {\n          const transformCoordinates = coords => {\n            if (!Array.isArray(coords)) return coords;\n            if (typeof coords[0] === \"number\") {\n              return proj4(sourceProjection, wgs84Projection, coords);\n            }\n            return coords.map(transformCoordinates);\n          };\n          feature.geometry.coordinates = transformCoordinates(feature.geometry.coordinates);\n          return feature;\n        });\n      }\n      if (geojson.features && geojson.features.length > 0) {\n        setGeoData(geojson);\n      } else {\n        alert(\"No valid features found in the shapefile.\");\n      }\n    } catch (error) {\n      console.error(\"Error processing shapefile:\", error);\n      alert(\"An error occurred while processing the shapefile.\");\n    }\n  };\n  const readFileAsArrayBuffer = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = () => reject(reader.error);\n    reader.readAsArrayBuffer(file);\n  });\n  const readFileAsText = file => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = () => reject(reader.error);\n    reader.readAsText(file);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      display: \"flex\",\n      flexDirection: \"row\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      className: \"map-container mt-5\",\n      style: {\n        width: \"70%\",\n        height: \"100vh\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-upload-section mt-5\",\n      style: {\n        width: \"30%\",\n        padding: \"20px\",\n        borderLeft: \"1px solid #ccc\",\n        backgroundColor: \"#f9f9f9\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Upload Shapefile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), Object.keys(fileInputRefs).map(ext => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Upload .\", ext.toUpperCase(), \":\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: `.${ext}`,\n            onChange: handleFileSelect,\n            ref: fileInputRefs[ext]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this)\n      }, ext, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: processShapefile,\n          children: \"Process Shapefile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetFiles,\n          style: {\n            marginLeft: \"10px\"\n          },\n          children: \"Clear Files\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n}\n_s(RenderMap, \"6Tev1abgFmbN0HSm7sDv9XXfskM=\");\n_c = RenderMap;\nexport default RenderMap;\nvar _c;\n$RefreshReg$(_c, \"RenderMap\");","map":{"version":3,"names":["React","useState","useRef","useEffect","shapefile","proj4","Loader","jsxDEV","_jsxDEV","defaultCenter","lat","lng","defaultZoom","RenderMap","_s","mapRef","googleMap","infoWindow","geoData","setGeoData","uploadedFiles","setUploadedFiles","shp","dbf","shx","prj","cpg","sbn","sbx","xml","fileInputRefs","loader","apiKey","version","load","then","current","window","google","maps","Map","center","zoom","InfoWindow","catch","error","console","data","forEach","feature","remove","addGeoJson","setStyle","fillColor","fillOpacity","strokeColor","strokeWeight","bounds","LatLngBounds","geometry","getGeometry","forEachLatLng","latLng","extend","isEmpty","fitBounds","warn","addListener","event","properties","forEachProperty","value","key","formattedProperties","Object","entries","map","join","getType","position","get","setPosition","getCenter","setContent","open","handleFileSelect","file","target","files","extension","name","split","pop","toLowerCase","includes","prevFiles","log","alert","resetFiles","confirm","values","ref","setCenter","setZoom","close","processShapefile","shpBuffer","readFileAsArrayBuffer","dbfBuffer","geojson","read","prjText","readFileAsText","sourceProjection","trim","wgs84Projection","features","transformCoordinates","coords","Array","isArray","coordinates","length","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","readAsText","className","style","display","flexDirection","children","width","height","fileName","_jsxFileName","lineNumber","columnNumber","padding","borderLeft","backgroundColor","keys","ext","toUpperCase","type","accept","onChange","marginTop","onClick","marginLeft","_c","$RefreshReg$"],"sources":["/Users/manibhadrasingh/Documents/gis_map/gis_map/src/RenderMap.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport * as shapefile from \"shapefile\";\nimport proj4 from \"proj4\";\nimport { Loader } from \"@googlemaps/js-api-loader\";\n// import \"./index.css\";\n\nconst defaultCenter = { lat: 21.838, lng: 73.7191 };\nconst defaultZoom = 8;\n\nfunction RenderMap() {\n  const mapRef = useRef(null);\n  const googleMap = useRef(null);\n  const infoWindow = useRef(null);\n  const [geoData, setGeoData] = useState(null);\n  const [uploadedFiles, setUploadedFiles] = useState({\n    shp: null,\n    dbf: null,\n    shx: null,\n    prj: null,\n    cpg: null,\n    sbn: null,\n    sbx: null,\n    xml: null,\n  });\n  const fileInputRefs = {\n    shp: useRef(),\n    dbf: useRef(),\n    shx: useRef(),\n    prj: useRef(),\n    cpg: useRef(),\n    sbn: useRef(),\n    sbx: useRef(),\n    xml: useRef(),\n  };\n\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: \"AIzaSyCKc0R1tpxSs85HgWUJ0cgnScSuDSIjNMA\", // Replace with your actual API key\n      version: \"weekly\",\n    });\n\n    loader\n      .load()\n      .then(() => {\n        googleMap.current = new window.google.maps.Map(mapRef.current, {\n          center: defaultCenter,\n          zoom: defaultZoom,\n        });\n        infoWindow.current = new window.google.maps.InfoWindow();\n      })\n      .catch((error) => {\n        console.error(\"Error loading Google Maps API:\", error);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (geoData && googleMap.current) {\n      // Clear existing data layers\n      googleMap.current.data.forEach((feature) => {\n        googleMap.current.data.remove(feature);\n      });\n\n      // Add new GeoJSON data\n      googleMap.current.data.addGeoJson(geoData);\n\n      googleMap.current.data.setStyle({\n        fillColor: \"#00FFFF\",\n        fillOpacity: 0.5,\n        strokeColor: \"#FF1493\",\n        strokeWeight: 2,\n      });\n\n      // Fit the map to GeoJSON bounds\n      const bounds = new window.google.maps.LatLngBounds();\n      googleMap.current.data.forEach((feature) => {\n        const geometry = feature.getGeometry();\n        if (geometry) {\n          geometry.forEachLatLng((latLng) => bounds.extend(latLng));\n        }\n      });\n\n      if (!bounds.isEmpty()) {\n        googleMap.current.fitBounds(bounds);\n      } else {\n        console.warn(\"No valid GeoJSON bounds to adjust the map.\");\n      }\n\n      // Add click listener to display feature data\n      googleMap.current.data.addListener(\"click\", (event) => {\n        const feature = event.feature;\n        const properties = {};\n        feature.forEachProperty((value, key) => {\n          properties[key] = value;\n        });\n\n        const formattedProperties = `\n          <table style=\"border-collapse: collapse; width: 100%;\">\n            ${Object.entries(properties)\n              .map(\n                ([key, value]) => `\n                  <tr>\n                    <td style=\"border: 1px solid #ccc; padding: 4px;\"><strong>${key}</strong></td>\n                    <td style=\"border: 1px solid #ccc; padding: 4px;\">${value}</td>\n                  </tr>\n                `\n              )\n              .join(\"\")}\n          </table>\n        `;\n\n        const geometry = feature.getGeometry();\n        if (geometry.getType() === \"Point\") {\n          const position = geometry.get();\n          infoWindow.current.setPosition(position);\n        } else {\n          const bounds = new window.google.maps.LatLngBounds();\n          geometry.forEachLatLng((latLng) => bounds.extend(latLng));\n          infoWindow.current.setPosition(bounds.getCenter());\n        }\n        infoWindow.current.setContent(formattedProperties);\n        infoWindow.current.open(googleMap.current);\n      });\n    }\n  }, [geoData]);\n\n  const handleFileSelect = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const extension = file.name.split(\".\").pop().toLowerCase();\n\n    if (\n      [\"shp\", \"dbf\", \"shx\", \"prj\", \"cpg\", \"sbn\", \"sbx\", \"xml\"].includes(\n        extension\n      )\n    ) {\n      setUploadedFiles((prevFiles) => ({\n        ...prevFiles,\n        [extension]: file,\n      }));\n      console.log(`${extension} file uploaded:`, file.name);\n    } else {\n      alert(\n        \"Invalid file type. Please upload .shp, .dbf, .shx, .prj, .cpg, .sbn, .sbx, or .xml files.\"\n      );\n    }\n  };\n\n  const resetFiles = () => {\n    if (!window.confirm(\"Are you sure you want to clear all uploaded files?\")) {\n      return;\n    }\n\n    setUploadedFiles({\n      shp: null,\n      dbf: null,\n      shx: null,\n      prj: null,\n      cpg: null,\n      sbn: null,\n      sbx: null,\n      xml: null,\n    });\n\n    setGeoData(null);\n\n    Object.values(fileInputRefs).forEach((ref) => {\n      if (ref.current) ref.current.value = null;\n    });\n\n    if (googleMap.current) {\n      googleMap.current.data.forEach((feature) => {\n        googleMap.current.data.remove(feature);\n      });\n      googleMap.current.setCenter(defaultCenter);\n      googleMap.current.setZoom(defaultZoom);\n    }\n\n    if (infoWindow.current) {\n      infoWindow.current.close();\n      infoWindow.current.setContent(null); // Clear the content\n    }\n  };\n\n  const processShapefile = async () => {\n    if (!uploadedFiles.shp || !uploadedFiles.dbf) {\n      alert(\"Please upload both .shp and .dbf files.\");\n      return;\n    }\n\n    try {\n      const shpBuffer = await readFileAsArrayBuffer(uploadedFiles.shp);\n      const dbfBuffer = await readFileAsArrayBuffer(uploadedFiles.dbf);\n\n      let geojson = await shapefile.read(shpBuffer, dbfBuffer);\n\n      if (uploadedFiles.prj) {\n        const prjText = await readFileAsText(uploadedFiles.prj);\n        const sourceProjection = proj4(prjText.trim());\n        const wgs84Projection = proj4(\"EPSG:4326\");\n\n        geojson.features = geojson.features.map((feature) => {\n          const transformCoordinates = (coords) => {\n            if (!Array.isArray(coords)) return coords;\n            if (typeof coords[0] === \"number\") {\n              return proj4(sourceProjection, wgs84Projection, coords);\n            }\n            return coords.map(transformCoordinates);\n          };\n\n          feature.geometry.coordinates = transformCoordinates(\n            feature.geometry.coordinates\n          );\n          return feature;\n        });\n      }\n\n      if (geojson.features && geojson.features.length > 0) {\n        setGeoData(geojson);\n      } else {\n        alert(\"No valid features found in the shapefile.\");\n      }\n    } catch (error) {\n      console.error(\"Error processing shapefile:\", error);\n      alert(\"An error occurred while processing the shapefile.\");\n    }\n  };\n\n  const readFileAsArrayBuffer = (file) =>\n    new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = () => reject(reader.error);\n      reader.readAsArrayBuffer(file);\n    });\n\n  const readFileAsText = (file) =>\n    new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = () => reject(reader.error);\n      reader.readAsText(file);\n    });\n\n  return (\n    <div className=\"App\" style={{ display: \"flex\", flexDirection: \"row\" }}>\n      <div\n        ref={mapRef}\n        className=\"map-container mt-5\"\n        style={{ width: \"70%\", height: \"100vh\" }}\n      ></div>\n      <div\n        className=\"file-upload-section mt-5\"\n        style={{\n          width: \"30%\",\n          padding: \"20px\",\n          borderLeft: \"1px solid #ccc\",\n          backgroundColor: \"#f9f9f9\",\n        }}\n      >\n        <h2>Upload Shapefile</h2>\n        {Object.keys(fileInputRefs).map((ext) => (\n          <div key={ext}>\n            <label>\n              Upload .{ext.toUpperCase()}:\n              <input\n                type=\"file\"\n                accept={`.${ext}`}\n                onChange={handleFileSelect}\n                ref={fileInputRefs[ext]}\n              />\n            </label>\n          </div>\n        ))}\n        <div style={{ marginTop: \"10px\" }}>\n          <button onClick={processShapefile}>Process Shapefile</button>\n          <button onClick={resetFiles} style={{ marginLeft: \"10px\" }}>\n            Clear Files\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RenderMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}